<#@ template debug="true" hostSpecific="true" language="C#"  #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="NasleGhalam.DomainClasses.Entities" #>
<#@ assembly name="$(SolutionDir)\NasleGhalam.DomainClasses\bin\Debug\NasleGhalam.DomainClasses.dll" #>
<#
	string modelName = "AssayAnswerSheet";
	var modelProps = typeof(AssayAnswerSheet).GetProperties();

	Dictionary<Type, string> Aliases = new Dictionary<Type, string>()
    {
        { typeof(byte), "byte" },
        { typeof(sbyte), "sbyte" },
        { typeof(short), "short" },
        { typeof(ushort), "ushort" },
        { typeof(int), "int" },
        { typeof(uint), "uint" },
        { typeof(long), "long" },
        { typeof(ulong), "ulong" },
        { typeof(float), "float" },
        { typeof(double), "double" },
        { typeof(decimal), "decimal" },
        { typeof(object), "object" },
        { typeof(bool), "bool" },
        { typeof(char), "char" },
        { typeof(string), "string" },
        { typeof(void), "void" },
        { typeof(Nullable<byte>), "byte?" },
        { typeof(Nullable<sbyte>), "sbyte?" },
        { typeof(Nullable<short>), "short?" },
        { typeof(Nullable<ushort>), "ushort?" },
        { typeof(Nullable<int>), "int?" },
        { typeof(Nullable<uint>), "uint?" },
        { typeof(Nullable<long>), "long?" },
        { typeof(Nullable<ulong>), "ulong?" },
        { typeof(Nullable<float>), "float?" },
        { typeof(Nullable<double>), "double?" },
        { typeof(Nullable<decimal>), "decimal?" },
        { typeof(Nullable<bool>), "bool?" },
        { typeof(Nullable<char>), "char?" }
    };
#>
using System.ComponentModel.DataAnnotations;

namespace NasleGhalam.ViewModels.<#= modelName #>
{
	public class <#= modelName #>ViewModel
	{
<#
		foreach(var prop in modelProps)
        {
			if ((prop.PropertyType.IsClass && prop.PropertyType.Name != "String")
                    || prop.PropertyType.IsGenericType)
                {
                    continue;
				}
#>
		[Display(Name = "")]
		public <#= Aliases.ContainsKey(prop.PropertyType)? Aliases[prop.PropertyType]:prop.PropertyType.Name #> <#= prop.Name #> { get; set; }


<#
        }
#>
	}
}
